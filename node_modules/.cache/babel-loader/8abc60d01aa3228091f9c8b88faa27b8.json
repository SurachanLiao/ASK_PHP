{"ast":null,"code":"import { CARD_STATUS, DECK_SIZE, CARD_SIZES } from \"../constants\"; //import 8 images of playing cards for testing purpose\n\nimport C2 from \"../assets/resized/2C.jpg\";\nimport C3 from \"../assets/resized/3C.jpg\";\nimport C4 from \"../assets/resized/4C.jpg\";\nimport C5 from \"../assets/resized/5C.jpg\";\nimport C6 from \"../assets/resized/6C.jpg\";\nimport C7 from \"../assets/resized/7C.jpg\";\nimport C8 from \"../assets/resized/8C.jpg\";\nimport cardsData from \"../components/cardsData\";\nconst BASE_URL = \"https://picsum.photos\";\nconst LIMIT = Math.ceil(DECK_SIZE / 2);\n/**\n * Create new game\n */\n\nexport default (() => {\n  const urls = getRandomUrls();\n  const deck = urls.concat(urls);\n\n  while (deck.length > DECK_SIZE) {\n    deck.pop();\n  }\n\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random()); // change this to shuffle a desk of 52 cards\n\n  return shuffledDeck;\n}); ////// change this function to generate a deck of 52 cards\n\nexport const getRandomUrls = () => {\n  // const imageUrl = `${BASE_URL}/${CARD_SIZES.width}/${CARD_SIZES.height}?random=`;\n  const imageUrl = [C2, C3, C4, C5, C6, C7, C8]; // const imageUrl = [LIMIT];\n  // imageUrl = imageUrl.map(url => cardsData.)\n  // const imageUrl = images;\n\n  const urlArray = []; // for (let index = 0; index < LIMIT; index++) {\n\n  for (let index = 0; index < LIMIT; index++) {\n    urlArray.push({\n      id: index,\n      url: imageUrl[index],\n      // url: imageUrl + index,\n      status: CARD_STATUS.HIDDEN\n    });\n  }\n\n  return urlArray;\n}; // // Attribution: from https://kaz-yamada.github.io/Card-Match-Game\n// // generate a deck of 52 cards\n// export const generateDeck = () => {\n//   // only 8 cards in deck for testing\n//   const cards = [C2,C3,C4,C5,C6,C7,C8];\n//   const deckArray = [];\n//   // create properties of each card\n//   for (let index = 0; index < LIMIT; index++) {\n//     deckArray.push({\n//       id: index,\n//       card: cards[index],\n//       status: CARD_STATUS.HIDDEN\n//     });\n//   }\n//   return deckArray;\n// };\n\n/**\n * Check if the game is completed\n * @param {*} deck\n */\n\nexport const checkGame = deck => {\n  const matches = Object.keys(deck).filter(key => deck[key].status === CARD_STATUS.MATCHED);\n  return matches.length === DECK_SIZE - 1;\n};","map":{"version":3,"sources":["/Users/Smile/ASK_PHP/src/services/GameService.js"],"names":["CARD_STATUS","DECK_SIZE","CARD_SIZES","C2","C3","C4","C5","C6","C7","C8","cardsData","BASE_URL","LIMIT","Math","ceil","urls","getRandomUrls","deck","concat","length","pop","shuffledDeck","sort","random","imageUrl","urlArray","index","push","id","url","status","HIDDEN","checkGame","matches","Object","keys","filter","key","MATCHED"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,cAAnD,C,CACA;;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUb,SAAS,GAAG,CAAtB,CAAd;AAEA;;;;AAGA,gBAAe,MAAM;AACnB,QAAMc,IAAI,GAAGC,aAAa,EAA1B;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYH,IAAZ,CAAb;;AAEA,SAAOE,IAAI,CAACE,MAAL,GAAclB,SAArB,EAAgC;AAC9BgB,IAAAA,IAAI,CAACG,GAAL;AACD;;AAED,QAAMC,YAAY,GAAGJ,IAAI,CAACK,IAAL,CAAU,MAAM,MAAMT,IAAI,CAACU,MAAL,EAAtB,CAArB,CARmB,CASnB;;AACA,SAAOF,YAAP;AACD,CAXD,E,CAaA;;AACA,OAAO,MAAML,aAAa,GAAG,MAAM;AACjC;AAEA,QAAMQ,QAAQ,GAAG,CAACrB,EAAD,EAAIC,EAAJ,EAAOC,EAAP,EAAUC,EAAV,EAAaC,EAAb,EAAgBC,EAAhB,EAAmBC,EAAnB,CAAjB,CAHiC,CAIjC;AACA;AAEA;;AACA,QAAMgB,QAAQ,GAAG,EAAjB,CARiC,CAUjC;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAA5B,EAAmCc,KAAK,EAAxC,EAA4C;AAC1CD,IAAAA,QAAQ,CAACE,IAAT,CAAc;AACZC,MAAAA,EAAE,EAAEF,KADQ;AAEZG,MAAAA,GAAG,EAAEL,QAAQ,CAACE,KAAD,CAFD;AAGZ;AACAI,MAAAA,MAAM,EAAE9B,WAAW,CAAC+B;AAJR,KAAd;AAMD;;AAED,SAAON,QAAP;AACD,CArBM,C,CAuBP;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;;;;AAIA,OAAO,MAAMO,SAAS,GAAGf,IAAI,IAAI;AAC/B,QAAMgB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYlB,IAAZ,EAAkBmB,MAAlB,CACdC,GAAG,IAAIpB,IAAI,CAACoB,GAAD,CAAJ,CAAUP,MAAV,KAAqB9B,WAAW,CAACsC,OAD1B,CAAhB;AAIA,SAAOL,OAAO,CAACd,MAAR,KAAmBlB,SAAS,GAAG,CAAtC;AACD,CANM","sourcesContent":["import { CARD_STATUS, DECK_SIZE, CARD_SIZES } from \"../constants\";\n//import 8 images of playing cards for testing purpose\nimport C2 from \"../assets/resized/2C.jpg\";\nimport C3 from \"../assets/resized/3C.jpg\";\nimport C4 from \"../assets/resized/4C.jpg\";\nimport C5 from \"../assets/resized/5C.jpg\";\nimport C6 from \"../assets/resized/6C.jpg\";\nimport C7 from \"../assets/resized/7C.jpg\";\nimport C8 from \"../assets/resized/8C.jpg\";\nimport cardsData from \"../components/cardsData\";\n\nconst BASE_URL = \"https://picsum.photos\";\nconst LIMIT = Math.ceil(DECK_SIZE / 2);\n\n/**\n * Create new game\n */\nexport default () => {\n  const urls = getRandomUrls();\n  const deck = urls.concat(urls);\n\n  while (deck.length > DECK_SIZE) {\n    deck.pop();\n  }\n\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random());\n  // change this to shuffle a desk of 52 cards\n  return shuffledDeck;\n};\n\n////// change this function to generate a deck of 52 cards\nexport const getRandomUrls = () => {\n  // const imageUrl = `${BASE_URL}/${CARD_SIZES.width}/${CARD_SIZES.height}?random=`;\n  \n  const imageUrl = [C2,C3,C4,C5,C6,C7,C8];\n  // const imageUrl = [LIMIT];\n  // imageUrl = imageUrl.map(url => cardsData.)\n\n  // const imageUrl = images;\n  const urlArray = [];\n\n  // for (let index = 0; index < LIMIT; index++) {\n  for (let index = 0; index < LIMIT; index++) {\n    urlArray.push({\n      id: index,\n      url: imageUrl[index],\n      // url: imageUrl + index,\n      status: CARD_STATUS.HIDDEN\n    });\n  }\n\n  return urlArray;\n};\n\n// // Attribution: from https://kaz-yamada.github.io/Card-Match-Game\n// // generate a deck of 52 cards\n// export const generateDeck = () => {\n//   // only 8 cards in deck for testing\n//   const cards = [C2,C3,C4,C5,C6,C7,C8];\n  \n//   const deckArray = [];\n\n//   // create properties of each card\n//   for (let index = 0; index < LIMIT; index++) {\n//     deckArray.push({\n//       id: index,\n//       card: cards[index],\n//       status: CARD_STATUS.HIDDEN\n//     });\n//   }\n\n//   return deckArray;\n// };\n\n/**\n * Check if the game is completed\n * @param {*} deck\n */\nexport const checkGame = deck => {\n  const matches = Object.keys(deck).filter(\n    key => deck[key].status === CARD_STATUS.MATCHED\n  );\n\n  return matches.length === DECK_SIZE - 1;\n};\n"]},"metadata":{},"sourceType":"module"}