{"ast":null,"code":"import { CARD_STATUS, DECK_SIZE, CARD_SIZES } from \"../constants\";\nimport C2 from \"../assets/resized/2C.jpg\";\nimport C3 from \"../assets/resized/3C.jpg\";\nimport C4 from \"../assets/resized/4C.jpg\";\nimport C5 from \"../assets/resized/5C.jpg\";\nimport C6 from \"../assets/resized/6C.jpg\";\nimport C7 from \"../assets/resized/7C.jpg\";\nimport C8 from \"../assets/resized/8C.jpg\";\nconst BASE_URL = \"https://picsum.photos\";\nconst LIMIT = Math.ceil(DECK_SIZE / 2);\n\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => {\n    images[item.replace('./', '')] = r(item);\n  });\n  return images;\n}\n\n{}\n/* <img src={images['doggy.png']} /> */\n\n/**\n * Create new game\n */\n\nexport default (() => {\n  const urls = getRandomUrls();\n  const deck = urls.concat(urls);\n\n  while (deck.length > DECK_SIZE) {\n    deck.pop();\n  }\n\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random()); // change this to shuffle a desk of 52 cards\n\n  return shuffledDeck;\n}); ////// change this function to generate a deck of 52 cards\n\nexport const getRandomUrls = () => {\n  // const imageUrl = `${BASE_URL}/${CARD_SIZES.width}/${CARD_SIZES.height}?random=`;\n  const imageUrl = [C2, C3, C4, C5, C6, C7, C8];\n  const images = importAll(require.context('../assets/resized', false, /\\.(jpg)$/));\n  const urlArray = []; // for (let index = 0; index < LIMIT; index++) {\n\n  for (let index = 0; index < 7; index++) {\n    urlArray.push({\n      id: index,\n      url: imageUrl + index,\n      // url: imageUrl + index,\n      status: CARD_STATUS.HIDDEN\n    });\n  }\n\n  return urlArray;\n};\n/**\n * Check if the game is completed\n * @param {*} deck\n */\n\nexport const checkGame = deck => {\n  const matches = Object.keys(deck).filter(key => deck[key].status === CARD_STATUS.MATCHED);\n  return matches.length === DECK_SIZE - 1;\n};","map":{"version":3,"sources":["/Users/Smile/ASK_PHP/src/services/GameService.js"],"names":["CARD_STATUS","DECK_SIZE","CARD_SIZES","C2","C3","C4","C5","C6","C7","C8","BASE_URL","LIMIT","Math","ceil","importAll","r","images","keys","map","item","index","replace","urls","getRandomUrls","deck","concat","length","pop","shuffledDeck","sort","random","imageUrl","require","context","urlArray","push","id","url","status","HIDDEN","checkGame","matches","Object","filter","key","MATCHED"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,cAAnD;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,0BAAf;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUZ,SAAS,GAAG,CAAtB,CAAd;;AAEA,SAASa,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,CAAC,CAACE,IAAF,GAASC,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAEJ,IAAAA,MAAM,CAACG,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCN,CAAC,CAACI,IAAD,CAAlC;AAA2C,GAA3E;AACA,SAAOH,MAAP;AACD;;AAED,CAAyC;AAAxC;;AAED;;;;AAGA,gBAAe,MAAM;AACnB,QAAMM,IAAI,GAAGC,aAAa,EAA1B;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYH,IAAZ,CAAb;;AAEA,SAAOE,IAAI,CAACE,MAAL,GAAczB,SAArB,EAAgC;AAC9BuB,IAAAA,IAAI,CAACG,GAAL;AACD;;AAED,QAAMC,YAAY,GAAGJ,IAAI,CAACK,IAAL,CAAU,MAAM,MAAMjB,IAAI,CAACkB,MAAL,EAAtB,CAArB,CARmB,CASnB;;AACA,SAAOF,YAAP;AACD,CAXD,E,CAaA;;AACA,OAAO,MAAML,aAAa,GAAG,MAAM;AACjC;AAEA,QAAMQ,QAAQ,GAAG,CAAC5B,EAAD,EAAIC,EAAJ,EAAOC,EAAP,EAAUC,EAAV,EAAaC,EAAb,EAAgBC,EAAhB,EAAmBC,EAAnB,CAAjB;AACA,QAAMO,MAAM,GAAGF,SAAS,CAACkB,OAAO,CAACC,OAAR,CAAgB,mBAAhB,EAAqC,KAArC,EAA4C,UAA5C,CAAD,CAAxB;AACA,QAAMC,QAAQ,GAAG,EAAjB,CALiC,CAOjC;;AACA,OAAK,IAAId,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,CAA5B,EAA+BA,KAAK,EAApC,EAAwC;AACtCc,IAAAA,QAAQ,CAACC,IAAT,CAAc;AACZC,MAAAA,EAAE,EAAEhB,KADQ;AAEZiB,MAAAA,GAAG,EAAEN,QAAQ,GAAGX,KAFJ;AAGZ;AACAkB,MAAAA,MAAM,EAAEtC,WAAW,CAACuC;AAJR,KAAd;AAMD;;AAED,SAAOL,QAAP;AACD,CAlBM;AAoBP;;;;;AAIA,OAAO,MAAMM,SAAS,GAAGhB,IAAI,IAAI;AAC/B,QAAMiB,OAAO,GAAGC,MAAM,CAACzB,IAAP,CAAYO,IAAZ,EAAkBmB,MAAlB,CACdC,GAAG,IAAIpB,IAAI,CAACoB,GAAD,CAAJ,CAAUN,MAAV,KAAqBtC,WAAW,CAAC6C,OAD1B,CAAhB;AAIA,SAAOJ,OAAO,CAACf,MAAR,KAAmBzB,SAAS,GAAG,CAAtC;AACD,CANM","sourcesContent":["import { CARD_STATUS, DECK_SIZE, CARD_SIZES } from \"../constants\";\nimport C2 from \"../assets/resized/2C.jpg\";\nimport C3 from \"../assets/resized/3C.jpg\";\nimport C4 from \"../assets/resized/4C.jpg\";\nimport C5 from \"../assets/resized/5C.jpg\";\nimport C6 from \"../assets/resized/6C.jpg\";\nimport C7 from \"../assets/resized/7C.jpg\";\nimport C8 from \"../assets/resized/8C.jpg\";\n\nconst BASE_URL = \"https://picsum.photos\";\nconst LIMIT = Math.ceil(DECK_SIZE / 2);\n\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\n  return images;\n}\n\n{/* <img src={images['doggy.png']} /> */}\n\n/**\n * Create new game\n */\nexport default () => {\n  const urls = getRandomUrls();\n  const deck = urls.concat(urls);\n\n  while (deck.length > DECK_SIZE) {\n    deck.pop();\n  }\n\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random());\n  // change this to shuffle a desk of 52 cards\n  return shuffledDeck;\n};\n\n////// change this function to generate a deck of 52 cards\nexport const getRandomUrls = () => {\n  // const imageUrl = `${BASE_URL}/${CARD_SIZES.width}/${CARD_SIZES.height}?random=`;\n\n  const imageUrl = [C2,C3,C4,C5,C6,C7,C8];\n  const images = importAll(require.context('../assets/resized', false, /\\.(jpg)$/));\n  const urlArray = [];\n\n  // for (let index = 0; index < LIMIT; index++) {\n  for (let index = 0; index < 7; index++) {\n    urlArray.push({\n      id: index,\n      url: imageUrl + index,\n      // url: imageUrl + index,\n      status: CARD_STATUS.HIDDEN\n    });\n  }\n\n  return urlArray;\n};\n\n/**\n * Check if the game is completed\n * @param {*} deck\n */\nexport const checkGame = deck => {\n  const matches = Object.keys(deck).filter(\n    key => deck[key].status === CARD_STATUS.MATCHED\n  );\n\n  return matches.length === DECK_SIZE - 1;\n};\n"]},"metadata":{},"sourceType":"module"}