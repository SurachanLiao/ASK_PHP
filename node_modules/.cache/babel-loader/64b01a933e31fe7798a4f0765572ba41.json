{"ast":null,"code":"var _jsxFileName = \"/Users/Smile/ASK_PHP/src/components/GameBoard.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport Card from \"./Card\";\nimport GameService from \"../services/GameService\";\nimport { CARD_STATUS, GAME_STATUS, DECK_SIZE } from \"../constants\";\nconst DELAY = 800;\nconst useStyles = createUseStyles({\n  board: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n    justifyItems: \"center\"\n  }\n});\nexport default (props => {\n  const [deck, setDeck] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [isChecking, setIsChecking] = useState(false);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [count, setCount] = useState(0);\n  const classes = useStyles();\n  /**\n   * Check if the all cards are matched and game is finished\n   * @param {*} newDeck\n   */\n\n  const checkGameFinished = useCallback(() => {\n    const matches = Object.keys(deck).filter( // === is when comparing each variable without convertion \n    key => deck[key].status === CARD_STATUS.MATCHED); // every pair of card is matched\n\n    if (matches.length === DECK_SIZE - 1) {\n      props.handleFinish();\n    }\n  }, [deck, props]);\n  /**\n   * Find odd card out and flip it\n   */\n\n  const flipAllCards = useCallback(() => {\n    setDeck(prevDeck => {\n      const key = Object.keys(deck).find(key => deck[key].status === CARD_STATUS.HIDDEN);\n\n      if (key) {\n        const remainder = { ...deck[key],\n          status: CARD_STATUS.SELECTED\n        };\n        const newDeck = { ...deck,\n          [key]: remainder\n        };\n        return newDeck;\n      }\n\n      return prevDeck;\n    });\n  }, [deck]);\n  /**\n   * Check if the flipped cards match\n   */\n\n  const checkPair = useCallback(() => {\n    if (firstCard && secondCard) {\n      const first = { ...deck[firstCard.index]\n      };\n      const second = { ...deck[secondCard.index]\n      };\n\n      if (firstCard.id === secondCard.id) {\n        first.status = CARD_STATUS.MATCHED;\n        second.status = CARD_STATUS.MATCHED;\n      } else {\n        first.status = CARD_STATUS.HIDDEN;\n        second.status = CARD_STATUS.HIDDEN;\n      }\n\n      const newDeck = { ...deck,\n        [firstCard.index]: first,\n        [secondCard.index]: second\n      };\n      setTimeout(() => {\n        setDeck(newDeck);\n      }, DELAY);\n      setTimeout(resetCards, DELAY);\n    }\n  }, [deck, firstCard, secondCard]);\n\n  const resetCards = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setIsChecking(false);\n  };\n  /**\n   *\n   * @param {*} index\n   * @param {*} status\n   */\n\n\n  const toggleCard = (index, status) => {\n    const newDeck = { ...deck\n    };\n    const newCard = { ...newDeck[index]\n    };\n    newCard.status = status;\n    newDeck[index] = newCard;\n    setDeck(newDeck);\n  };\n\n  const handleClick = (index, id) => {\n    if (!isChecking && count < 2) {\n      const newCount = count + 1;\n      const newCard = {\n        index,\n        id\n      };\n      setCount(newCount);\n\n      if (newCount === 1) {\n        setFirstCard(newCard);\n      } else {\n        setSecondCard(newCard);\n        setIsChecking(true);\n      }\n\n      toggleCard(index, CARD_STATUS.SELECTED);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 2) {\n      setCount(0);\n      checkPair();\n    }\n  }, [count, checkPair]); // useEffect(() => {\n  //   const { gameStatus } = props;\n  //   // Initialise game\n  //   if (\n  //     gameStatus === GAME_STATUS.CREATING ||\n  //     gameStatus === GAME_STATUS.RESETTING\n  //   ) {\n  //     setIsLoading(true);\n  //     setDeck(GameService());\n  //     setIsLoading(false);\n  //     props.handleStart();\n  //   } else if (gameStatus === GAME_STATUS.IN_PROGRESS) {\n  //     checkGameFinished();\n  //   } else if (gameStatus === GAME_STATUS.FINISHED) {\n  //     flipAllCards();\n  //   }\n  // }, [checkGameFinished, flipAllCards, props]);\n\n  useEffect(() => {\n    const {\n      gameStatus\n    } = props; // Initialise game\n\n    if (gameStatus === GAME_STATUS.CREATING || gameStatus === GAME_STATUS.RESETTING) {\n      setIsLoading(true);\n      setDeck(GameService());\n      setIsLoading(false);\n      props.handleStart();\n    } else if (gameStatus === GAME_STATUS.IN_PROGRESS) {\n      flipAllCards();\n      checkGameFinished();\n    }\n  }, [checkGameFinished, flipAllCards, props]);\n  return React.createElement(\"div\", {\n    className: classes.board,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, isLoading ? \"Loading...\" : Object.entries(deck).map(([key, value]) => {\n    return React.createElement(Card, {\n      key: key,\n      index: key,\n      data: value,\n      handleClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    });\n  }));\n});","map":{"version":3,"sources":["/Users/Smile/ASK_PHP/src/components/GameBoard.jsx"],"names":["React","useState","useEffect","useCallback","createUseStyles","Card","GameService","CARD_STATUS","GAME_STATUS","DECK_SIZE","DELAY","useStyles","board","display","gridTemplateColumns","justifyItems","props","deck","setDeck","isLoading","setIsLoading","isChecking","setIsChecking","firstCard","setFirstCard","secondCard","setSecondCard","count","setCount","classes","checkGameFinished","matches","Object","keys","filter","key","status","MATCHED","length","handleFinish","flipAllCards","prevDeck","find","HIDDEN","remainder","SELECTED","newDeck","checkPair","first","index","second","id","setTimeout","resetCards","toggleCard","newCard","handleClick","newCount","gameStatus","CREATING","RESETTING","handleStart","IN_PROGRESS","entries","map","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { createUseStyles } from \"react-jss\";\n\nimport Card from \"./Card\";\nimport GameService from \"../services/GameService\";\nimport { CARD_STATUS, GAME_STATUS, DECK_SIZE } from \"../constants\";\n\nconst DELAY = 800;\n\nconst useStyles = createUseStyles({\n  board: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n    justifyItems: \"center\"\n  }\n});\n\nexport default props => {\n  const [deck, setDeck] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [isChecking, setIsChecking] = useState(false);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [count, setCount] = useState(0);\n  const classes = useStyles();\n\n  /**\n   * Check if the all cards are matched and game is finished\n   * @param {*} newDeck\n   */\n  const checkGameFinished = useCallback(() => {\n    const matches = Object.keys(deck).filter(\n      // === is when comparing each variable without convertion \n      key => deck[key].status === CARD_STATUS.MATCHED\n    );\n      // every pair of card is matched\n    if (matches.length === DECK_SIZE - 1) {\n      props.handleFinish();\n    }\n  }, [deck, props]);\n \n  /**\n   * Find odd card out and flip it\n   */\n  const flipAllCards = useCallback(() => {\n    setDeck(prevDeck => {\n      const key = Object.keys(deck).find(\n        key => deck[key].status === CARD_STATUS.HIDDEN\n      );\n\n      if (key) {\n        const remainder = { ...deck[key], status: CARD_STATUS.SELECTED };\n\n        const newDeck = {\n          ...deck,\n          [key]: remainder\n        };\n\n        return newDeck;\n      }\n\n      return prevDeck;\n    });\n  }, [deck]);\n\n  /**\n   * Check if the flipped cards match\n   */\n  const checkPair = useCallback(() => {\n    if (firstCard && secondCard) {\n      const first = { ...deck[firstCard.index] };\n      const second = { ...deck[secondCard.index] };\n\n      if (firstCard.id === secondCard.id) {\n        first.status = CARD_STATUS.MATCHED;\n        second.status = CARD_STATUS.MATCHED;\n      } else {\n        first.status = CARD_STATUS.HIDDEN;\n        second.status = CARD_STATUS.HIDDEN;\n      }\n\n      const newDeck = {\n        ...deck,\n        [firstCard.index]: first,\n        [secondCard.index]: second\n      };\n\n      setTimeout(() => {\n        setDeck(newDeck);\n      }, DELAY);\n\n      setTimeout(resetCards, DELAY);\n    }\n  }, [deck, firstCard, secondCard]);\n\n  const resetCards = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setIsChecking(false);\n  };\n\n  /**\n   *\n   * @param {*} index\n   * @param {*} status\n   */\n  const toggleCard = (index, status) => {\n    const newDeck = { ...deck };\n    const newCard = { ...newDeck[index] };\n\n    newCard.status = status;\n    newDeck[index] = newCard;\n\n    setDeck(newDeck);\n  };\n\n  const handleClick = (index, id) => {\n    if (!isChecking && count < 2) {\n      const newCount = count + 1;\n      const newCard = { index, id };\n      setCount(newCount);\n\n      if (newCount === 1) {\n        setFirstCard(newCard);\n      } else {\n        setSecondCard(newCard);\n        setIsChecking(true);\n      }\n\n      toggleCard(index, CARD_STATUS.SELECTED);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 2) {\n      setCount(0);\n      checkPair();\n    }\n  }, [count, checkPair]);\n\n  // useEffect(() => {\n  //   const { gameStatus } = props;\n\n  //   // Initialise game\n  //   if (\n  //     gameStatus === GAME_STATUS.CREATING ||\n  //     gameStatus === GAME_STATUS.RESETTING\n  //   ) {\n  //     setIsLoading(true);\n  //     setDeck(GameService());\n  //     setIsLoading(false);\n  //     props.handleStart();\n  //   } else if (gameStatus === GAME_STATUS.IN_PROGRESS) {\n  //     checkGameFinished();\n  //   } else if (gameStatus === GAME_STATUS.FINISHED) {\n  //     flipAllCards();\n  //   }\n  // }, [checkGameFinished, flipAllCards, props]);\n\n  useEffect(() => {\n    const { gameStatus } = props;\n\n    // Initialise game\n    if (\n      gameStatus === GAME_STATUS.CREATING ||\n      gameStatus === GAME_STATUS.RESETTING\n    ) {\n      setIsLoading(true);\n      setDeck(GameService());\n      setIsLoading(false);\n      props.handleStart();\n    } else if (gameStatus === GAME_STATUS.IN_PROGRESS){\n      flipAllCards();\n      checkGameFinished();\n    }\n  }, [checkGameFinished, flipAllCards, props]);\n\n  return (\n    <div className={classes.board}>\n      {isLoading\n        ? \"Loading...\"\n        : Object.entries(deck).map(([key, value]) => {\n            return (\n              <Card\n                key={key}\n                index={key}\n                data={value}\n                handleClick={handleClick}\n              />\n            );\n          })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}